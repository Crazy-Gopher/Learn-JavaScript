## The <script> Tag:
In HTML, JavaScript code must be inserted between <script> and </script> tags. Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.

##JavaScript in <body>
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript in Body</h2>
<p id="demo">A Paragraph.</p>
<button type="button" onclick="myFunction()">Try it</button>
<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
</body>
</html> 

Note: Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.
Note: Old JavaScript examples may use a type attribute: <script type="text/javascript">. The type attribute is not required. JavaScript is the default scripting language in HTML.

## JavaScript in <head>
<!DOCTYPE html>
<html>
<head>
<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
</head>
<body>
<h2>JavaScript in Head</h2>
<p id="demo">A Paragraph.</p>
<button type="button" onclick="myFunction()">Try it</button>
</body>
</html> 


## External file
<!DOCTYPE html>
<html>
<body>
<h2>External JavaScript</h2>
<p id="demo">A Paragraph.</p>
<button type="button" onclick="myFunction()">Try it</button>
<p>(myFunction is stored in an external file called "myScript.js")</p>
<script src="myScript.js"></script>
</body>
</html>

External file: myScript.js
function myFunction() {
 document.getElementById("demo").innerHTML = "Paragraph changed.";
}

Note: External scripts cannot contain <script> tags.
<script src="https://www.w3schools.com/js/myScript.js"></script>
<script src="/js/myScript1.js"></script>

## JavaScript Functions and Events
A JavaScript function is a block of JavaScript code, that can be executed when "called" for. For example, a function can be called when an event occurs, like when the user clicks a button.


## Console Input output
<!DOCTYPE html>
<html>
<body>
<p id="demo">My first paragraph.</p>

<script>document.write(5 + 6);</script>

<button type="button" onclick="myFunction()">Try it</button>

<script>
function myFunction() {
document.getElementById("demo").innerHTML = 5 + 6;
document.getElementById("demo").innerHTML = "Paragraph changed.";
document.write(5 + 6);
window.alert(5 + 6);
console.log(5 + 6);
}
</script>

</body>
</html>


<p id="demo"></p>

<script>
var x, y, z;  // Statement 1
x = 5;    // Statement 2
y = 6;    // Statement 3
z = x + y;  // Statement 4

document.getElementById("demo").innerHTML =
"The value of z is " + z + ".";  
</script>

Note: On the web, you might see examples without semicolons. Ending statements with semicolon is not required, but highly recommended.



## JavaScript White Space
You can add white space to your script to make it more readable. The following lines are equivalent:
var person = "Hege";
var person="Hege";


## JavaScript Line Length and Line Breaks
For best readability, programmers often like to avoid code lines longer than 80 characters.

document.getElementById("demo")
.innerHTML =
"Hello Dy!";

## JavaScript Code Blocks
function myFunction() {
  document.getElementById("demo1").innerHTML = "Hello Dolly!";
  document.getElementById("demo2").innerHTML = "How are you?";
}


## JavaScript Keywords 64 keywords
abstract	arguments	await*	boolean
break	byte	case	catch
char	class*	const	continue
debugger	default	delete	do
double	else	enum*	eval
export*	extends*	false	final
finally	float	for	function
goto	if	implements	import*
in	instanceof	int	interface
let*	long	native	new
null	package	private	protected
public	return	short	static
super*	switch	synchronized	this
throw	throws	transient	true
try	typeof	var	void
volatile	while	with	yield

## literal
10.50
1001
"John Doe"
'John Doe'


## JavaScript Operators
left to right:
arithmetic operators:
+	Addition
-	Subtraction
*	Multiplication
**	Exponentiation (ES2016)
/	Division
%	Modulus (Division Remainder)
++	Increment
--	Decrement
assignment operator:
=	x = y	x = y
+=	x += y	x = x + y
-=	x -= y	x = x - y
*=	x *= y	x = x * y
/=	x /= y	x = x / y
%=	x %= y	x = x % y
<<=	x <<= y	x = x << y
>>=	x >>= y	x = x >> y
>>>=	x >>>= y	x = x >>> y
&=	x &= y	x = x & y
^=	x ^= y	x = x ^ y
|=	x |= y	x = x | y
**=	x **= y	x = x ** y
The **= operator is an experimental part of the ECMAScript 2016 proposal (ES7). It is not stable across browsers. Do not use it.



+ and += operator can also be used to add (concatenate) strings.

var x = 5 + 5;  10
var y = "5" + 5; "55"
var z = "Hello" + 5; "hello5"
If you add a number and a string, the result will be a string!

Comparison Operators:
==	equal to
===	equal value and equal type
!=	not equal
!==	not equal value or not equal type
>	greater than
<	less than
>=	greater than or equal to
<=	less than or equal to
?	ternary operator

Logical Operators:
&&	logical and
||	logical or
!	logical not

Type Operators:
typeof	Returns the type of a variable
instanceof	Returns true if an object is an instance of an object type


Bitwise Operators:
Bit operators work on 32 bits numbers.

Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.
Operator	Description	Example	Same as	Result	Decimal
&	AND	5 & 1	0101 & 0001	0001	 1
|	OR	5 | 1	0101 | 0001	0101	 5
~	NOT	~ 5	 ~0101	1010	 10
^	XOR	5 ^ 1	0101 ^ 0001	0100	 4
<<	Zero fill left shift	5 << 1	0101 << 1	1010	 10
>>	Signed right shift	5 >> 1	0101 >> 1	0010	  2
>>>	Zero fill right shift	5 >>> 1	0101 >>> 1	0010	  2



## Expression
x = x * 10;
document.getElementById("demo").innerHTML = "John" + "     "  + "Doe";  evaluates to "John Doe"

## Comment
Single line comment : double slashes // 
Multiline comment: between /* and */ 


## Identifiers
In JavaScript, the first character must be a letter, or an underscore (_), or a dollar sign ($).
Subsequent characters may be letters, digits, underscores, or dollar signs.

Names can contain letters, digits, underscores, and dollar signs.
Names must begin with a letter or $ or _ 
Names are case sensitive (y and Y are different variables)
Reserved words (like JavaScript keywords) cannot be used as names

All JavaScript identifiers are case sensitive. Use Camel Case


## JavaScript Character Set
JavaScript uses the Unicode character set.

Unicode covers (almost) all the characters, punctuations, and symbols in the world.



## Variable
JavaScript uses the var keyword to declare variables.
var x; declaration
x = 6; assignment
var carName = "Volvo"; Initialization

var person = "John Doe", carName = "Volvo", price = 200;

var x = 5;
var y = 6;
var z = x + y;

note: default value of a variable is 'undefined'
It's a good programming practice to declare all variables at the beginning of a script.

## Multiple statements
a = 5; b = 6; c = a + b;

var person = "John Doe",
carName = "Volvo",
price = 200;

var x = 5 + 2 + 3;
var x = "John" + " " + "Doe";

If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.
var x = "5" + 2 + 3;

var x = 2 + 3 + "5"
55

Re-Declaring JavaScript Variables
If you re-declare a JavaScript variable, it will not lose its value.

<script>
var carName = "Volvo";
var carName;
document.getElementById("demo").innerHTML = carName;
</script>


## Operator Precedence:
https://www.w3schools.com/js/js_arithmetic.asp
20	( )	Expression grouping	(3 + 4)
 	 	 	 
19	.	Member	person.name
19	[]	Member	person["name"]
19	()	Function call	myFunction()
19	new	Create	new Date()
 	 	 	 
17	++	Postfix Increment	i++
17	--	Postfix Decrement	i--
 	 	 	 
16	++	Prefix Increment	++i
16	--	Prefix Decrement	--i
16	!	Logical not	!(x==y)
16	typeof	Type	typeof x
 	 	 	 
15	**	Exponentiation (ES2016)	10 ** 2
 	 	 	 
14	*	Multiplication	10 * 5
14	/	Division	10 / 5
14	%	Division Remainder	10 % 5
 	 	 	 
13	+	Addition	10 + 5
13	-	Subtraction	10 - 5
 	 	 	 
12	<<	Shift left	x << 2
12	>>	Shift right	x >> 2
12	>>>	Shift right (unsigned)	x >>> 2
 	 	 	 
11	<	Less than	x < y 
11	<=	Less than or equal	x <= y
11	>	Greater than	x > y
11	>=	Greater than or equal	x >= y
11	in	Property in Object	"PI" in Math
11	instanceof	Instance of Object	instanceof Array
 	 	 	 
10	==	Equal	x == y
10	===	Strict equal	x === y
10	!=	Unequal	x != y
10	!==	Strict unequal	x !== y
 	 	 	 
9	&	Bitwise AND	x & y
8	^	Bitwise XOR	x ^ y
7	|	Bitwise OR	x | y
6	&&	Logical AND	x && y
5	||	Logical OR	x || y
4	? :	Condition	? "Yes" : "No"
 	 	 	 
3	+=	Assignment	x += y
3	/=	Assignment	x /= y
3	-=	Assignment	x -= y
3	*=	Assignment	x *= y
3	%=	Assignment	x %= y
3	<<=	Assignment	x <<= y
3	>>=	Assignment	x >>= y
3	>>>=	Assignment	x >>>= y
3	&=	Assignment	x &= y
3	^=	Assignment	x ^= y
3	|=	Assignment	x |= y
 	 	 	 
2	yield	Pause Function	yield x
1	,	Comma	5 , 6
